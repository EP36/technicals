/*
Given this list of numbers return the top 10 area codes in the list.

Log an array with objects containing the count and code, sorted descending by count something like:
[
  { count: 22, code: '626' },
  ...
]
*/

var numbers = [
  "+14042648041",
  "+15103476661",
  "+16266470361",
  "+16269560732",
  "+17342138572",
  "+14155549786",
  "+14041604827",
  "+14047282406",
  "+15100631587",
  "+12122042076",
  "+12122032605",
  "+14048722221",
  "+16261216913",
  "+15104293484",
  "+12127887271",
  "+15100229285",
  "+17344898635",
  "+14154259948",
  "+17349682562",
  "+16262855157",
  "+12121370674",
  "+14157492236",
  "+16260746224",
  "+14152082700",
  "+17344325717",
  "+15106165428",
  "+14153278933",
  "+16266631033",
  "+14045044046",
  "+12129884845",
  "+12121398756",
  "+14152930362",
  "+17341063683",
  "+14041583634",
  "+14150980741",
  "+14157018619",
  "+14158260441",
  "+14159477242",
  "+14155415146",
  "+15104196783",
  "+17343744289",
  "+12124220834",
  "+17343677745",
  "+14049228951",
  "+16269731757",
  "+17346741021",
  "+14157816815",
  "+15104569782",
  "+14047335203",
  "+16266246625",
  "+12121727188",
  "+14151964882",
  "+17349692952",
  "+16261089540",
  "+17347685582",
  "+16263557072",
  "+16263570351",
  "+14152699659",
  "+17346032345",
  "+15100829708",
  "+16265631523",
  "+12128799794",
  "+14151395744",
  "+14159117785",
  "+16268652267",
  "+17343300273",
  "+14048678331",
  "+12125356561",
  "+16260734530",
  "+15106754598",
  "+12129397951",
  "+14151297311",
  "+16264245101",
  "+17344298072",
  "+17346874070",
  "+12126502079",
  "+17343569695",
  "+15100539412",
  "+15109341722",
  "+12128379001",
  "+15108183014",
  "+14157477392",
  "+17342801181",
  "+16260395551",
  "+15108656272",
  "+15107742706",
  "+14044643503",
  "+17345349902",
  "+12123335934",
  "+12120105992",
  "+17343968939",
  "+15102331372",
  "+16268324659",
  "+14044268886",
  "+17349911744",
  "+14150794717",
  "+16266367812",
  "+15100833974",
  "+12123363826",
  "+15108717431",
  "+15105060629",
  "+16265572851",
  "+13349395739",
  "+18182965638",
  "+18189775948",
  "+18453053442",
  "+14040776200",
  "+13108869844",
  "+13239802818",
  "+19167145233",
  "+17200482506",
  "+16260539618",
  "+13057296319",
  "+16846577639",
  "+19510206746",
  "+14791645334",
  "+16501453346",
  "+19380183473",
  "+17071417061",
  "+16571792883",
  "+13025593799",
  "+12174970976",
  "+19389670054",
  "+14427499895",
  "+15599266176",
  "+15200693355",
  "+18703827076",
  "+14805759719",
  "+16576608772",
  "+12523250540",
  "+16691724616",
  "+16265560825",
  "+18452175857",
  "+18586070362",
  "+18606326478",
  "+12052469431",
  "+17146470792",
  "+16691642009",
  "+16263104419",
  "+14158132560",
  "+18182432953",
  "+13232206163",
  "+16842772225",
  "+17472341918",
  "+19497838856",
  "+14755014151",
  "+19492566655",
  "+17346630660",
  "+15621256920",
  "+17079451541",
  "+12561382035",
  "+18185330438",
  "+19140120849",
  "+12063820070",
  "+17070314822",
  "+13306446324",
  "+14240457602",
  "+13303753558",
  "+18316386079",
  "+15106007517",
  "+14424028330",
  "+17600156086",
  "+13305389181",
  "+12510155146",
  "+12315126987",
  "+12094924739",
  "+13613747829",
  "+16615164237",
  "+16612153509",
  "+12560447798",
  "+12122709133",
  "+12396173022",
  "+18584222004",
  "+12319364924",
  "+18584968902",
  "+16236153750",
  "+16231410764",
  "+14420467743",
  "+17078452765",
  "+18187774323",
  "+16234864758",
  "+12171625290",
  "+15306940314",
  "+13051880052",
  "+16238282763",
  "+15701189463",
  "+16235368546",
  "+19289626633",
  "+15015658723",
  "+14789106732",
  "+19092179720",
  "+18580032048",
  "+17190887305",
  "+12065623714",
  "+14081190301",
  "+19250809341",
  "+18705999364",
  "+17144042840",
  "+12316292378",
  "+17341563025"
];

// const solution = (arr) => {
// // create variable for results that will be an array
// const results = [];

// // iterate through input array
// for (let i = 0; i < arr.length; i++) {
//   // create temporary empty object
//   let obj = {
//     'count': 1,
//     'code': ''
//   };

//   // each iteration, splice from index 2-4
//   let area = arr[i].slice(2, 5);

//   if (results.length > 0) {
//     for (let j = 0; j < results.length; j++) {
//       if (Object.values(results[j]).includes(area.toString())) {
//         results[j]['count']++;
//       } else {
//           obj['code'] = area.toString();
//       }
//     }
//     results.push(obj);
//   } else {
//     obj['code'] = area.toString();
//     results.push(obj);
//   }

//   // iterate through results array
  
//     // check if each element in results array hasOwnProperty  for area code, if it does, increment count by 1
//     // else 
//       // create key value pair for count initialized to 1
//       // create key value pair for code in temp obj
//       // push obj into results array
// }


// // return results
// return results;
// }

const solution = (arr) => {
  const results = [];
  const codes = [];
  
  for (let i = 0; i < arr.length; i++) {
    codes.push(arr[i].slice(2,5));
  }

  for (let i = 0; i < codes.length; i++) {
    let obj = {
      'count': 1,
      'code': codes[i]
    }
    if (results.length === 0) {
      results.push(obj)
    } else {
      for (let j = 0; j < results.length; j++) {
        console.log()
        if (Object.values(results[j]).includes(codes[i])) {
          results[j]['count']++;
        } else {
          continue;
        }
      }
      results.push(obj);
    }
  }

  return results;
}

console.log(solution(numbers))